{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mhans\\\\prime-app\\\\src\\\\HorizontalBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst data1 = [{\n  date: '2023-08-01',\n  remediation: 10,\n  totalInvocations: 50\n}, {\n  date: '2023-08-02',\n  remediation: 15,\n  totalInvocations: 60\n}\n// Add more data entries here\n];\n\nconst data2 = [{\n  date: '2023-08-01',\n  remediation: 5,\n  totalInvocations: 30\n}, {\n  date: '2023-08-02',\n  remediation: 12,\n  totalInvocations: 40\n}\n// Add more data entries here\n];\n\n// Merge data based on shared dates\nconst mergedData = data1.map(entry1 => {\n  const matchingEntry = data2.find(entry2 => entry2.date === entry1.date);\n  if (matchingEntry) {\n    return {\n      date: entry1.date,\n      totalInvocationsData1: entry1.totalInvocations,\n      totalInvocationsData2: matchingEntry.totalInvocations\n    };\n  } else {\n    return {\n      date: entry1.date,\n      totalInvocationsData1: entry1.totalInvocations,\n      totalInvocationsData2: 0\n    };\n  }\n});\nconst HorizontalBarChart = () => {\n  _s();\n  const [selectedData, setSelectedData] = useState(null);\n  const chartData = {\n    labels: mergedData.map(entry => entry.date),\n    datasets: [{\n      label: 'Total Invocations (Data 1)',\n      backgroundColor: 'rgba(66, 165, 245, 0.6)',\n      // Blue color for Data 1\n      data: mergedData.map(entry => entry.totalInvocationsData1)\n    }, {\n      label: 'Total Invocations (Data 2)',\n      backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      // Red color for Data 2\n      data: mergedData.map(entry => entry.totalInvocationsData2)\n    }]\n  };\n  const options = {\n    indexAxis: 'y',\n    // Use 'y' for horizontal bar chart\n    scales: {\n      x: {\n        beginAtZero: true\n      },\n      y: {\n        ticks: {\n          autoSkip: false\n        }\n      }\n    },\n    onClick: (_, elements) => {\n      if (elements.length > 0) {\n        const clickedIndex = elements[0].index;\n        setSelectedData(mergedData[clickedIndex]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"horizontal-bar-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Horizontal Bar Chart with Merged Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), selectedData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Date: \", selectedData.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Invocations (Data 1): \", selectedData.totalInvocationsData1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Invocations (Data 2): \", selectedData.totalInvocationsData2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(HorizontalBarChart, \"c4bOALSTODQR6VX0keyz1PASxSo=\");\n_c = HorizontalBarChart;\nexport default HorizontalBarChart;\nvar _c;\n$RefreshReg$(_c, \"HorizontalBarChart\");","map":{"version":3,"names":["React","useState","Bar","Chart","registerables","jsxDEV","_jsxDEV","register","data1","date","remediation","totalInvocations","data2","mergedData","map","entry1","matchingEntry","find","entry2","totalInvocationsData1","totalInvocationsData2","HorizontalBarChart","_s","selectedData","setSelectedData","chartData","labels","entry","datasets","label","backgroundColor","data","options","indexAxis","scales","x","beginAtZero","y","ticks","autoSkip","onClick","_","elements","length","clickedIndex","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mhans/prime-app/src/HorizontalBarChart.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\n\r\nconst data1 = [\r\n  { date: '2023-08-01', remediation: 10, totalInvocations: 50 },\r\n  { date: '2023-08-02', remediation: 15, totalInvocations: 60 },\r\n  // Add more data entries here\r\n];\r\n\r\nconst data2 = [\r\n  { date: '2023-08-01', remediation: 5, totalInvocations: 30 },\r\n  { date: '2023-08-02', remediation: 12, totalInvocations: 40 },\r\n  // Add more data entries here\r\n];\r\n\r\n// Merge data based on shared dates\r\nconst mergedData = data1.map(entry1 => {\r\n  const matchingEntry = data2.find(entry2 => entry2.date === entry1.date);\r\n  if (matchingEntry) {\r\n    return {\r\n      date: entry1.date,\r\n      totalInvocationsData1: entry1.totalInvocations,\r\n      totalInvocationsData2: matchingEntry.totalInvocations,\r\n    };\r\n  } else {\r\n    return {\r\n      date: entry1.date,\r\n      totalInvocationsData1: entry1.totalInvocations,\r\n      totalInvocationsData2: 0,\r\n    };\r\n  }\r\n});\r\n\r\nconst HorizontalBarChart = () => {\r\n  const [selectedData, setSelectedData] = useState(null);\r\n\r\n  const chartData = {\r\n    labels: mergedData.map(entry => entry.date),\r\n    datasets: [\r\n      {\r\n        label: 'Total Invocations (Data 1)',\r\n        backgroundColor: 'rgba(66, 165, 245, 0.6)', // Blue color for Data 1\r\n        data: mergedData.map(entry => entry.totalInvocationsData1),\r\n      },\r\n      {\r\n        label: 'Total Invocations (Data 2)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.6)', // Red color for Data 2\r\n        data: mergedData.map(entry => entry.totalInvocationsData2),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    indexAxis: 'y', // Use 'y' for horizontal bar chart\r\n    scales: {\r\n      x: {\r\n        beginAtZero: true,\r\n      },\r\n      y: {\r\n        ticks: {\r\n          autoSkip: false,\r\n        },\r\n      },\r\n    },\r\n    onClick: (_, elements) => {\r\n      if (elements.length > 0) {\r\n        const clickedIndex = elements[0].index;\r\n        setSelectedData(mergedData[clickedIndex]);\r\n      }\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"horizontal-bar-chart\">\r\n      <h2>Horizontal Bar Chart with Merged Data</h2>\r\n      <Bar data={chartData} options={options} />\r\n      {selectedData && (\r\n        <div className=\"selected-data\">\r\n          <h3>Selected Data:</h3>\r\n          <p>Date: {selectedData.date}</p>\r\n          <p>Total Invocations (Data 1): {selectedData.totalInvocationsData1}</p>\r\n          <p>Total Invocations (Data 2): {selectedData.totalInvocationsData2}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HorizontalBarChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}