{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mhans\\\\prime-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiBarGraph = ({\n  dataTables\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const datasets = [];\n      let labels = []; // Define the labels array\n\n      dataTables.forEach((table, index) => {\n        const data = table.map(row => row.totalInvocations);\n        labels = table.map(row => row.date); // Update the labels array\n        const color = getRandomColor(); // Function to generate random colors\n\n        datasets.push({\n          label: `Remediation ${index + 1}`,\n          data,\n          backgroundColor: color,\n          borderColor: color,\n          borderWidth: 1\n        });\n      });\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels,\n          // Use the updated labels array\n          datasets\n        },\n        options: {\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true\n            }\n          }\n        }\n      });\n    }\n  }, [dataTables]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n\n// ... Rest of the code remains the same ...\n_s(MultiBarGraph, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = MultiBarGraph;\nvar _c;\n$RefreshReg$(_c, \"MultiBarGraph\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","MultiBarGraph","dataTables","_s","chartRef","current","ctx","getContext","datasets","labels","forEach","table","index","data","map","row","totalInvocations","date","color","getRandomColor","push","label","backgroundColor","borderColor","borderWidth","type","options","scales","x","stacked","y","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mhans/prime-app/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js';\n\nconst MultiBarGraph = ({ dataTables }) => {\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const datasets = [];\n      let labels = []; // Define the labels array\n\n      dataTables.forEach((table, index) => {\n        const data = table.map(row => row.totalInvocations);\n        labels = table.map(row => row.date); // Update the labels array\n        const color = getRandomColor(); // Function to generate random colors\n\n        datasets.push({\n          label: `Remediation ${index + 1}`,\n          data,\n          backgroundColor: color,\n          borderColor: color,\n          borderWidth: 1,\n        });\n      });\n\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels, // Use the updated labels array\n          datasets,\n        },\n        options: {\n          scales: {\n            x: {\n              stacked: true,\n            },\n            y: {\n              stacked: true,\n            },\n          },\n        },\n      });\n    }\n  }, [dataTables]);\n\n  return <canvas ref={chartRef} />;\n};\n\n// ... Rest of the code remains the same ...\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,CAACC,OAAO,EAAE;MACpB,MAAMC,GAAG,GAAGF,QAAQ,CAACC,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MAC7C,MAAMC,QAAQ,GAAG,EAAE;MACnB,IAAIC,MAAM,GAAG,EAAE,CAAC,CAAC;;MAEjBP,UAAU,CAACQ,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QACnC,MAAMC,IAAI,GAAGF,KAAK,CAACG,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,gBAAgB,CAAC;QACnDP,MAAM,GAAGE,KAAK,CAACG,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;QACrC,MAAMC,KAAK,GAAGC,cAAc,CAAC,CAAC,CAAC,CAAC;;QAEhCX,QAAQ,CAACY,IAAI,CAAC;UACZC,KAAK,EAAG,eAAcT,KAAK,GAAG,CAAE,EAAC;UACjCC,IAAI;UACJS,eAAe,EAAEJ,KAAK;UACtBK,WAAW,EAAEL,KAAK;UAClBM,WAAW,EAAE;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,IAAI1B,KAAK,CAACQ,GAAG,EAAE;QACbmB,IAAI,EAAE,KAAK;QACXZ,IAAI,EAAE;UACJJ,MAAM;UAAE;UACRD;QACF,CAAC;QACDkB,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,OAAO,EAAE;YACX,CAAC;YACDC,CAAC,EAAE;cACDD,OAAO,EAAE;YACX;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAC3B,UAAU,CAAC,CAAC;EAEhB,oBAAOF,OAAA;IAAQ+B,GAAG,EAAE3B;EAAS;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;;AAED;AAAAhC,EAAA,CA9CMF,aAAa;AAAAmC,EAAA,GAAbnC,aAAa;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}