{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mhans\\\\prime-app\\\\src\\\\MultiBarGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiBarGraph = ({\n  dataTables\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const [chartOptions, setChartOptions] = useState(options);\n  useEffect(() => {\n    const datasets = [];\n    let labels = [];\n    dataTables.forEach((table, index) => {\n      const data = table.map(row => row.totalInvocations);\n      labels = table.map(row => row.date);\n      const color = getRandomColor();\n      datasets.push({\n        label: `Remediation ${index + 1}`,\n        data,\n        backgroundColor: color,\n        borderColor: color,\n        borderWidth: 1\n      });\n    });\n    const data = {\n      labels,\n      datasets\n    };\n    setChartData(data);\n  }, [dataTables]);\n  const handleElementClick = elems => {\n    // Handle clicks on chart elements here\n    if (elems.length > 0) {\n      // Update chart options, for example:\n      setChartOptions({\n        ...chartOptions\n        // Update options as needed\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    data: chartData,\n    options: chartOptions,\n    onElementsClick: handleElementClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(MultiBarGraph, \"Wa/QDd/1en3M+uyfKE9G92yrdC8=\");\n_c = MultiBarGraph;\nconst options = {\n  scales: {\n    x: {\n      type: 'category',\n      stacked: true\n    },\n    y: {\n      stacked: true\n    }\n  }\n};\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nexport default MultiBarGraph;\nvar _c;\n$RefreshReg$(_c, \"MultiBarGraph\");","map":{"version":3,"names":["React","useEffect","useState","Bar","jsxDEV","_jsxDEV","MultiBarGraph","dataTables","_s","chartData","setChartData","chartOptions","setChartOptions","options","datasets","labels","forEach","table","index","data","map","row","totalInvocations","date","color","getRandomColor","push","label","backgroundColor","borderColor","borderWidth","handleElementClick","elems","length","onElementsClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","scales","x","type","stacked","y","letters","i","Math","floor","random","$RefreshReg$"],"sources":["C:/Users/mhans/prime-app/src/MultiBarGraph.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst MultiBarGraph = ({ dataTables }) => {\r\n  const [chartData, setChartData] = useState({});\r\n  const [chartOptions, setChartOptions] = useState(options);\r\n\r\n  useEffect(() => {\r\n    const datasets = [];\r\n    let labels = [];\r\n\r\n    dataTables.forEach((table, index) => {\r\n      const data = table.map(row => row.totalInvocations);\r\n      labels = table.map(row => row.date);\r\n      const color = getRandomColor();\r\n\r\n      datasets.push({\r\n        label: `Remediation ${index + 1}`,\r\n        data,\r\n        backgroundColor: color,\r\n        borderColor: color,\r\n        borderWidth: 1,\r\n      });\r\n    });\r\n\r\n    const data = {\r\n      labels,\r\n      datasets,\r\n    };\r\n\r\n    setChartData(data);\r\n  }, [dataTables]);\r\n\r\n  const handleElementClick = (elems) => {\r\n    // Handle clicks on chart elements here\r\n    if (elems.length > 0) {\r\n      // Update chart options, for example:\r\n      setChartOptions({\r\n        ...chartOptions,\r\n        // Update options as needed\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Bar\r\n      data={chartData}\r\n      options={chartOptions}\r\n      onElementsClick={handleElementClick}\r\n    />\r\n  );\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    x: {\r\n      type: 'category',\r\n      stacked: true,\r\n    },\r\n    y: {\r\n      stacked: true,\r\n    },\r\n  },\r\n};\r\n\r\nfunction getRandomColor() {\r\n  const letters = '0123456789ABCDEF';\r\n  let color = '#';\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nexport default MultiBarGraph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAACW,OAAO,CAAC;EAEzDZ,SAAS,CAAC,MAAM;IACd,MAAMa,QAAQ,GAAG,EAAE;IACnB,IAAIC,MAAM,GAAG,EAAE;IAEfR,UAAU,CAACS,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MACnC,MAAMC,IAAI,GAAGF,KAAK,CAACG,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,gBAAgB,CAAC;MACnDP,MAAM,GAAGE,KAAK,CAACG,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACE,IAAI,CAAC;MACnC,MAAMC,KAAK,GAAGC,cAAc,CAAC,CAAC;MAE9BX,QAAQ,CAACY,IAAI,CAAC;QACZC,KAAK,EAAG,eAAcT,KAAK,GAAG,CAAE,EAAC;QACjCC,IAAI;QACJS,eAAe,EAAEJ,KAAK;QACtBK,WAAW,EAAEL,KAAK;QAClBM,WAAW,EAAE;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAMX,IAAI,GAAG;MACXJ,MAAM;MACND;IACF,CAAC;IAEDJ,YAAY,CAACS,IAAI,CAAC;EACpB,CAAC,EAAE,CAACZ,UAAU,CAAC,CAAC;EAEhB,MAAMwB,kBAAkB,GAAIC,KAAK,IAAK;IACpC;IACA,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpB;MACArB,eAAe,CAAC;QACd,GAAGD;QACH;MACF,CAAC,CAAC;IACJ;EACF,CAAC;;EAED,oBACEN,OAAA,CAACF,GAAG;IACFgB,IAAI,EAAEV,SAAU;IAChBI,OAAO,EAAEF,YAAa;IACtBuB,eAAe,EAAEH;EAAmB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEN,CAAC;AAAC9B,EAAA,CAhDIF,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AAkDnB,MAAMO,OAAO,GAAG;EACd2B,MAAM,EAAE;IACNC,CAAC,EAAE;MACDC,IAAI,EAAE,UAAU;MAChBC,OAAO,EAAE;IACX,CAAC;IACDC,CAAC,EAAE;MACDD,OAAO,EAAE;IACX;EACF;AACF,CAAC;AAED,SAASlB,cAAcA,CAAA,EAAG;EACxB,MAAMoB,OAAO,GAAG,kBAAkB;EAClC,IAAIrB,KAAK,GAAG,GAAG;EACf,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BtB,KAAK,IAAIqB,OAAO,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAClD;EACA,OAAOzB,KAAK;AACd;AAEA,eAAelB,aAAa;AAAC,IAAAiC,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}