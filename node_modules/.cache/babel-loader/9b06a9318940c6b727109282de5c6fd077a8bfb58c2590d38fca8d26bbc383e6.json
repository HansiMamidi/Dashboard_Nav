{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mhans\\\\prime-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { InputText } from 'primereact/inputtext';\n// import { Button } from 'primereact/button';\n// import { DataTable } from 'primereact/datatable';\n// import { Column } from 'primereact/column';\n// import { Chart } from 'primereact/chart';\n// import { Menubar } from 'primereact/menubar';\n\n// const EditableTable = () => {\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [profile, setProfile] = useState([]);\n//   const [country, setCountry] = useState('');\n//   const [data, setData] = useState([]);\n//   const [editingRows, setEditingRows] = useState({});\n//   const [countryData, setCountryData] = useState({});\n//   const [displayChart, setDisplayChart] = useState(false);\n\n//   const addRow = () => {\n//     if (!name || !country || !email || !profile) {\n//       alert('Please fill in all fields.');\n//       return;\n//     }\n\n//     setData((prevData) => [\n//       ...prevData,\n//       { name, email, profile, country }\n//     ]);\n\n//     // Clear input fields after adding data to the table\n//     setName('');\n//     setEmail('');\n//     setProfile([]);\n//     setCountry('');\n//   };\n\n//   const debounce = (fn, delay) => {\n//     let timer;\n//     return function (...args) {\n//       clearTimeout(timer);\n//       timer = setTimeout(() => fn.apply(this, args), delay);\n//     };\n//   };\n\n//   const onRowEditInit = (event) => {\n//     const rowIndex = event.index;\n//     let editingRowsCopy = { ...editingRows };\n//     editingRowsCopy[rowIndex] = { ...data[rowIndex] };\n//     setEditingRows(editingRowsCopy);\n//   };\n\n//   const onRowEditSave = (event) => {\n//     const rowIndex = event.index;\n//     let updatedData = [...data];\n//     updatedData[rowIndex] = editingRows[rowIndex];\n//     setData(updatedData);\n//     setEditingRows({});\n//   };\n\n//   const onRowEditCancel = (event) => {\n//     setEditingRows({});\n//   };\n\n//   const onEditorValueChange = (props, value) => {\n//     const rowIndex = props.rowIndex;\n//     const field = props.field;\n//     setEditingRows((prevEditingRows) => {\n//       const updatedRow = { ...prevEditingRows[rowIndex], [field]: value };\n//       return { ...prevEditingRows, [rowIndex]: updatedRow };\n//     });\n//   };\n\n//   const prepareCountryData = () => {\n//     const countries = data.map((item) => item.country);\n//     const countryCount = {};\n//     countries.forEach((country) => {\n//       countryCount[country] = (countryCount[country] || 0) + 1;\n//     });\n//     setCountryData(countryCount);\n//   };\n\n//   useEffect(() => {\n//     prepareCountryData();\n//   }, [data]);\n\n//   const countryDataForChart = {\n//     labels: Object.keys(countryData),\n//     datasets: [\n//       {\n//         data: Object.values(countryData),\n//         backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#7C4DFF', '#00D0FF', '#FF5C93'],\n//         hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#7C4DFF', '#00D0FF', '#FF5C93']\n//       }\n//     ]\n//   };\n\n//   const menuItems = [\n//     {\n//       label: 'Dashboard',\n//       icon: 'pi pi-chart-bar',\n//       command: () => setDisplayChart(false),\n//       items: [\n//         {\n//           label: 'Records',\n//           icon: 'pi pi-table',\n//           command: () => setDisplayChart(!displayChart)\n//         }\n//       ]\n//     }\n//   ];\n\n//   return (\n//     <div>\n//       <Menubar model={menuItems} />\n\n//       <h2>Editable Table</h2>\n//       {!displayChart && (\n//         <React.Fragment>\n//           <form>\n//             <InputText id=\"name\" placeholder=\"Name\" value={name} onChange={(e) => setName(e.target.value)} required />\n//             <InputText id=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n//             <InputText id=\"profile\" placeholder=\"Profile\" value={profile} onChange={(e) => setProfile(e.target.value)} required />\n//             <InputText id=\"country\" placeholder=\"Country\" value={country} onChange={(e) => setCountry(e.target.value)} required />\n\n//             <Button type=\"button\" label=\"Add\" onClick={addRow} className=\"p-button-primary\" />\n//           </form>\n\n//           <DataTable\n//             value={data}\n//             editMode=\"row\"\n//             dataKey=\"email\"\n//             onRowEditInit={onRowEditInit}\n//             onRowEditSave={onRowEditSave}\n//             onRowEditCancel={onRowEditCancel}\n//           >\n//             <Column field=\"name\" header=\"Name\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['name']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['name']} />\n//             <Column field=\"email\" header=\"Email\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['email']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['email']} />\n//             <Column field=\"profile\" header=\"Profile\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['profile']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['profile']} />\n//             <Column field=\"country\" header=\"Country\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['country']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['country']} />\n\n//             <Column rowEditor style={{ width: '70px' }} />\n//           </DataTable>\n//         </React.Fragment>\n//       )}\n\n//       {displayChart && (\n//         <div className=\"chart-container\" style={{ marginTop: '2rem', textAlign: 'center' }}>\n//           <h3>Country Statistics</h3>\n//           <Chart type=\"pie\" data={countryDataForChart} />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EditableTable;\n\nimport React, { useState, useEffect } from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { Chart } from 'primereact/chart';\nimport { Menubar } from 'primereact/menubar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableTable = () => {\n  _s();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [profile, setProfile] = useState([]);\n  const [country, setCountry] = useState('');\n  const [data, setData] = useState([]);\n  const [editingRows, setEditingRows] = useState({});\n  const [countryData, setCountryData] = useState({});\n  const [displayChart, setDisplayChart] = useState(false);\n  const addRow = () => {\n    if (!name || !country || !email || !profile) {\n      alert('Please fill in all fields.');\n      return;\n    }\n    setData(prevData => [...prevData, {\n      name,\n      email,\n      profile,\n      country\n    }]);\n\n    // Clear input fields after adding data to the table\n    setName('');\n    setEmail('');\n    setProfile([]);\n    setCountry('');\n  };\n  const debounce = (fn, delay) => {\n    let timer;\n    return function (...args) {\n      clearTimeout(timer);\n      timer = setTimeout(() => fn.apply(this, args), delay);\n    };\n  };\n  const onRowEditInit = event => {\n    const rowIndex = event.index;\n    let editingRowsCopy = {\n      ...editingRows\n    };\n    editingRowsCopy[rowIndex] = {\n      ...data[rowIndex]\n    };\n    setEditingRows(editingRowsCopy);\n  };\n  const onRowEditSave = event => {\n    const rowIndex = event.index;\n    let updatedData = [...data];\n    updatedData[rowIndex] = editingRows[rowIndex];\n    setData(updatedData);\n    setEditingRows({});\n  };\n  const onRowEditCancel = event => {\n    setEditingRows({});\n  };\n  const onEditorValueChange = (props, value) => {\n    const rowIndex = props.rowIndex;\n    const field = props.field;\n    setEditingRows(prevEditingRows => {\n      const updatedRow = {\n        ...prevEditingRows[rowIndex],\n        [field]: value\n      };\n      return {\n        ...prevEditingRows,\n        [rowIndex]: updatedRow\n      };\n    });\n  };\n  const prepareCountryData = () => {\n    const countries = data.map(item => item.country);\n    const countryCount = {};\n    countries.forEach(country => {\n      countryCount[country] = (countryCount[country] || 0) + 1;\n    });\n    setCountryData(countryCount);\n  };\n  useEffect(() => {\n    prepareCountryData();\n  }, [data]);\n  const countryDataForChart = {\n    labels: Object.keys(countryData),\n    datasets: [{\n      data: Object.values(countryData),\n      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#7C4DFF', '#00D0FF', '#FF5C93'],\n      hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#7C4DFF', '#00D0FF', '#FF5C93']\n    }]\n  };\n  const menuItems = [{\n    label: 'Dashboard',\n    icon: 'pi pi-chart-bar',\n    command: () => setDisplayChart(false),\n    items: [{\n      label: 'Records',\n      icon: 'pi pi-table',\n      command: () => setDisplayChart(!displayChart),\n      disabled: displayChart // Disable the \"Records\" item when displayChart is true\n    }]\n  }];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Menubar, {\n      model: menuItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Editable Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), !displayChart && /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(InputText, {\n          id: \"name\",\n          placeholder: \"Name\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InputText, {\n          id: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InputText, {\n          id: \"profile\",\n          placeholder: \"Profile\",\n          value: profile,\n          onChange: e => setProfile(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InputText, {\n          id: \"country\",\n          placeholder: \"Country\",\n          value: country,\n          onChange: e => setCountry(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          label: \"Add\",\n          onClick: addRow,\n          className: \"p-button-primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n        value: data,\n        editMode: \"row\",\n        dataKey: \"email\",\n        onRowEditInit: onRowEditInit,\n        onRowEditSave: onRowEditSave,\n        onRowEditCancel: onRowEditCancel,\n        children: [/*#__PURE__*/_jsxDEV(Column, {\n          field: \"name\",\n          header: \"Name\",\n          editor: props => editingRows[props.rowIndex] ? /*#__PURE__*/_jsxDEV(InputText, {\n            type: \"text\",\n            value: editingRows[props.rowIndex]['name'],\n            onChange: e => onEditorValueChange(props, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 97\n          }, this) : props.rowData['name']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          field: \"email\",\n          header: \"Email\",\n          editor: props => editingRows[props.rowIndex] ? /*#__PURE__*/_jsxDEV(InputText, {\n            type: \"text\",\n            value: editingRows[props.rowIndex]['email'],\n            onChange: e => onEditorValueChange(props, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 99\n          }, this) : props.rowData['email']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          field: \"profile\",\n          header: \"Profile\",\n          editor: props => editingRows[props.rowIndex] ? /*#__PURE__*/_jsxDEV(InputText, {\n            type: \"text\",\n            value: editingRows[props.rowIndex]['profile'],\n            onChange: e => onEditorValueChange(props, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 103\n          }, this) : props.rowData['profile']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          field: \"country\",\n          header: \"Country\",\n          editor: props => editingRows[props.rowIndex] ? /*#__PURE__*/_jsxDEV(InputText, {\n            type: \"text\",\n            value: editingRows[props.rowIndex]['country'],\n            onChange: e => onEditorValueChange(props, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 103\n          }, this) : props.rowData['country']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          rowEditor: true,\n          style: {\n            width: '70px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this), displayChart && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        marginTop: '2rem',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Country Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        type: \"pie\",\n        data: countryDataForChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"button\",\n        label: \"Back to Dashboard\",\n        onClick: () => setDisplayChart(false),\n        className: \"p-button-secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(EditableTable, \"XfvmA5ZAgIZh7psNjrKPOn9cfY8=\");\n_c = EditableTable;\nexport default EditableTable;\nvar _c;\n$RefreshReg$(_c, \"EditableTable\");","map":{"version":3,"names":["React","useState","useEffect","InputText","Button","DataTable","Column","Chart","Menubar","jsxDEV","_jsxDEV","EditableTable","_s","name","setName","email","setEmail","profile","setProfile","country","setCountry","data","setData","editingRows","setEditingRows","countryData","setCountryData","displayChart","setDisplayChart","addRow","alert","prevData","debounce","fn","delay","timer","args","clearTimeout","setTimeout","apply","onRowEditInit","event","rowIndex","index","editingRowsCopy","onRowEditSave","updatedData","onRowEditCancel","onEditorValueChange","props","value","field","prevEditingRows","updatedRow","prepareCountryData","countries","map","item","countryCount","forEach","countryDataForChart","labels","Object","keys","datasets","values","backgroundColor","hoverBackgroundColor","menuItems","label","icon","command","items","disabled","children","model","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","id","placeholder","onChange","e","target","required","type","onClick","className","editMode","dataKey","header","editor","rowData","rowEditor","style","width","marginTop","textAlign","_c","$RefreshReg$"],"sources":["C:/Users/mhans/prime-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { InputText } from 'primereact/inputtext';\n// import { Button } from 'primereact/button';\n// import { DataTable } from 'primereact/datatable';\n// import { Column } from 'primereact/column';\n// import { Chart } from 'primereact/chart';\n// import { Menubar } from 'primereact/menubar';\n\n// const EditableTable = () => {\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [profile, setProfile] = useState([]);\n//   const [country, setCountry] = useState('');\n//   const [data, setData] = useState([]);\n//   const [editingRows, setEditingRows] = useState({});\n//   const [countryData, setCountryData] = useState({});\n//   const [displayChart, setDisplayChart] = useState(false);\n\n//   const addRow = () => {\n//     if (!name || !country || !email || !profile) {\n//       alert('Please fill in all fields.');\n//       return;\n//     }\n\n//     setData((prevData) => [\n//       ...prevData,\n//       { name, email, profile, country }\n//     ]);\n\n//     // Clear input fields after adding data to the table\n//     setName('');\n//     setEmail('');\n//     setProfile([]);\n//     setCountry('');\n//   };\n\n//   const debounce = (fn, delay) => {\n//     let timer;\n//     return function (...args) {\n//       clearTimeout(timer);\n//       timer = setTimeout(() => fn.apply(this, args), delay);\n//     };\n//   };\n\n//   const onRowEditInit = (event) => {\n//     const rowIndex = event.index;\n//     let editingRowsCopy = { ...editingRows };\n//     editingRowsCopy[rowIndex] = { ...data[rowIndex] };\n//     setEditingRows(editingRowsCopy);\n//   };\n\n//   const onRowEditSave = (event) => {\n//     const rowIndex = event.index;\n//     let updatedData = [...data];\n//     updatedData[rowIndex] = editingRows[rowIndex];\n//     setData(updatedData);\n//     setEditingRows({});\n//   };\n\n//   const onRowEditCancel = (event) => {\n//     setEditingRows({});\n//   };\n\n//   const onEditorValueChange = (props, value) => {\n//     const rowIndex = props.rowIndex;\n//     const field = props.field;\n//     setEditingRows((prevEditingRows) => {\n//       const updatedRow = { ...prevEditingRows[rowIndex], [field]: value };\n//       return { ...prevEditingRows, [rowIndex]: updatedRow };\n//     });\n//   };\n\n//   const prepareCountryData = () => {\n//     const countries = data.map((item) => item.country);\n//     const countryCount = {};\n//     countries.forEach((country) => {\n//       countryCount[country] = (countryCount[country] || 0) + 1;\n//     });\n//     setCountryData(countryCount);\n//   };\n\n//   useEffect(() => {\n//     prepareCountryData();\n//   }, [data]);\n\n//   const countryDataForChart = {\n//     labels: Object.keys(countryData),\n//     datasets: [\n//       {\n//         data: Object.values(countryData),\n//         backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#7C4DFF', '#00D0FF', '#FF5C93'],\n//         hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#7C4DFF', '#00D0FF', '#FF5C93']\n//       }\n//     ]\n//   };\n\n//   const menuItems = [\n//     {\n//       label: 'Dashboard',\n//       icon: 'pi pi-chart-bar',\n//       command: () => setDisplayChart(false),\n//       items: [\n//         {\n//           label: 'Records',\n//           icon: 'pi pi-table',\n//           command: () => setDisplayChart(!displayChart)\n//         }\n//       ]\n//     }\n//   ];\n\n//   return (\n//     <div>\n//       <Menubar model={menuItems} />\n\n//       <h2>Editable Table</h2>\n//       {!displayChart && (\n//         <React.Fragment>\n//           <form>\n//             <InputText id=\"name\" placeholder=\"Name\" value={name} onChange={(e) => setName(e.target.value)} required />\n//             <InputText id=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n//             <InputText id=\"profile\" placeholder=\"Profile\" value={profile} onChange={(e) => setProfile(e.target.value)} required />\n//             <InputText id=\"country\" placeholder=\"Country\" value={country} onChange={(e) => setCountry(e.target.value)} required />\n\n//             <Button type=\"button\" label=\"Add\" onClick={addRow} className=\"p-button-primary\" />\n//           </form>\n\n//           <DataTable\n//             value={data}\n//             editMode=\"row\"\n//             dataKey=\"email\"\n//             onRowEditInit={onRowEditInit}\n//             onRowEditSave={onRowEditSave}\n//             onRowEditCancel={onRowEditCancel}\n//           >\n//             <Column field=\"name\" header=\"Name\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['name']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['name']} />\n//             <Column field=\"email\" header=\"Email\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['email']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['email']} />\n//             <Column field=\"profile\" header=\"Profile\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['profile']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['profile']} />\n//             <Column field=\"country\" header=\"Country\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['country']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['country']} />\n            \n//             <Column rowEditor style={{ width: '70px' }} />\n//           </DataTable>\n//         </React.Fragment>\n//       )}\n\n//       {displayChart && (\n//         <div className=\"chart-container\" style={{ marginTop: '2rem', textAlign: 'center' }}>\n//           <h3>Country Statistics</h3>\n//           <Chart type=\"pie\" data={countryDataForChart} />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EditableTable;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { Chart } from 'primereact/chart';\nimport { Menubar } from 'primereact/menubar';\n\nconst EditableTable = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [profile, setProfile] = useState([]);\n  const [country, setCountry] = useState('');\n  const [data, setData] = useState([]);\n  const [editingRows, setEditingRows] = useState({});\n  const [countryData, setCountryData] = useState({});\n  const [displayChart, setDisplayChart] = useState(false);\n\n  const addRow = () => {\n    if (!name || !country || !email || !profile) {\n      alert('Please fill in all fields.');\n      return;\n    }\n\n    setData((prevData) => [\n      ...prevData,\n      { name, email, profile, country }\n    ]);\n\n    // Clear input fields after adding data to the table\n    setName('');\n    setEmail('');\n    setProfile([]);\n    setCountry('');\n  };\n\n  const debounce = (fn, delay) => {\n    let timer;\n    return function (...args) {\n      clearTimeout(timer);\n      timer = setTimeout(() => fn.apply(this, args), delay);\n    };\n  };\n\n  const onRowEditInit = (event) => {\n    const rowIndex = event.index;\n    let editingRowsCopy = { ...editingRows };\n    editingRowsCopy[rowIndex] = { ...data[rowIndex] };\n    setEditingRows(editingRowsCopy);\n  };\n\n  const onRowEditSave = (event) => {\n    const rowIndex = event.index;\n    let updatedData = [...data];\n    updatedData[rowIndex] = editingRows[rowIndex];\n    setData(updatedData);\n    setEditingRows({});\n  };\n\n  const onRowEditCancel = (event) => {\n    setEditingRows({});\n  };\n\n  const onEditorValueChange = (props, value) => {\n    const rowIndex = props.rowIndex;\n    const field = props.field;\n    setEditingRows((prevEditingRows) => {\n      const updatedRow = { ...prevEditingRows[rowIndex], [field]: value };\n      return { ...prevEditingRows, [rowIndex]: updatedRow };\n    });\n  };\n\n  const prepareCountryData = () => {\n    const countries = data.map((item) => item.country);\n    const countryCount = {};\n    countries.forEach((country) => {\n      countryCount[country] = (countryCount[country] || 0) + 1;\n    });\n    setCountryData(countryCount);\n  };\n\n  useEffect(() => {\n    prepareCountryData();\n  }, [data]);\n\n  const countryDataForChart = {\n    labels: Object.keys(countryData),\n    datasets: [\n      {\n        data: Object.values(countryData),\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#7C4DFF', '#00D0FF', '#FF5C93'],\n        hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#7C4DFF', '#00D0FF', '#FF5C93']\n      }\n    ]\n  };\n\n  const menuItems = [\n    {\n      label: 'Dashboard',\n      icon: 'pi pi-chart-bar',\n      command: () => setDisplayChart(false),\n      items: [\n        {\n          label: 'Records',\n          icon: 'pi pi-table',\n          command: () => setDisplayChart(!displayChart),\n          disabled: displayChart // Disable the \"Records\" item when displayChart is true\n        }\n      ]\n    }\n  ];\n\n  return (\n    <div>\n      <Menubar model={menuItems} />\n\n      <h2>Editable Table</h2>\n      {!displayChart && (\n        <React.Fragment>\n          <form>\n            <InputText id=\"name\" placeholder=\"Name\" value={name} onChange={(e) => setName(e.target.value)} required />\n            <InputText id=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n            <InputText id=\"profile\" placeholder=\"Profile\" value={profile} onChange={(e) => setProfile(e.target.value)} required />\n            <InputText id=\"country\" placeholder=\"Country\" value={country} onChange={(e) => setCountry(e.target.value)} required />\n\n            <Button type=\"button\" label=\"Add\" onClick={addRow} className=\"p-button-primary\" />\n          </form>\n\n          <DataTable\n            value={data}\n            editMode=\"row\"\n            dataKey=\"email\"\n            onRowEditInit={onRowEditInit}\n            onRowEditSave={onRowEditSave}\n            onRowEditCancel={onRowEditCancel}\n          >\n            <Column field=\"name\" header=\"Name\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['name']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['name']} />\n            <Column field=\"email\" header=\"Email\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['email']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['email']} />\n            <Column field=\"profile\" header=\"Profile\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['profile']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['profile']} />\n            <Column field=\"country\" header=\"Country\" editor={(props) => editingRows[props.rowIndex] ? <InputText type=\"text\" value={editingRows[props.rowIndex]['country']} onChange={(e) => onEditorValueChange(props, e.target.value)} /> : props.rowData['country']} />\n            \n            <Column rowEditor style={{ width: '70px' }} />\n          </DataTable>\n        </React.Fragment>\n      )}\n\n      {displayChart && (\n        <div className=\"chart-container\" style={{ marginTop: '2rem', textAlign: 'center' }}>\n          <h3>Country Statistics</h3>\n          <Chart type=\"pie\" data={countryDataForChart} />\n          <Button type=\"button\" label=\"Back to Dashboard\" onClick={() => setDisplayChart(false)} className=\"p-button-secondary\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditableTable;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,OAAO,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM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"},"metadata":{},"sourceType":"module","externalDependencies":[]}